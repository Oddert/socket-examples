{"version":3,"sources":["actions/types.js","sockets/index.js","components/Send.js","components/Container.js","actions/index.js","constants/initialState.js","reducers/messages.js","reducers/index.js","constants/store.js","App.js","serviceWorker.js","index.js"],"names":["types","COUNTER","ADD_MESSAGE","socket","openSocket","Send","e","preventDefault","emit","this","input","value","_this","react_default","a","createElement","onSubmit","handleSubmit","bind","type","ref","React","Component","Container","on","payload","console","log","props","addMessage","components_Send","messages","map","each","idx","key","connect","state","dispatch","initialState","arguments","length","undefined","action","Object","toConsumableArray","concat","rootReducer","combineReducers","middleWareInput","thunk","middleware","compose","applyMiddleware","apply","store","createStore","App","className","es","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","client_src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAKeA,EALD,CACZC,QAAS,UACTC,YAAa,uBCEAC,QAFAC,KCkBAC,uLAhBCC,GACZA,EAAEC,iBACFJ,EAAOK,KAAK,UAAWC,KAAKC,MAAMC,OAClCF,KAAKC,MAAMC,MAAQ,oCAGX,IAAAC,EAAAH,KACR,OACEI,EAAAC,EAAAC,cAAA,QAAMC,SAAUP,KAAKQ,aAAaC,KAAKT,OACrCI,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,IAAK,SAAAd,GAAC,OAAIM,EAAKF,MAAQJ,KAC1CO,EAAAC,EAAAC,cAAA,qCAXWM,IAAMC,WCGnBC,8LACiB,IAAAX,EAAAH,KACnBN,EAAOqB,GAAG,UAAW,SAAAC,GACnBC,QAAQC,IAAIF,GACZb,EAAKgB,MAAMC,WAAWJ,sCAKxB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,UACGN,KAAKmB,MAAMG,SAASC,IAAI,SAACC,EAAMC,GAAP,OACvBrB,EAAAC,EAAAC,cAAA,MAAIoB,IAAKD,GAAMD,cAfHZ,IAAMC,WA+Bfc,cARS,SAAAC,GAAK,MAAK,CAChCN,SAAUM,EAAMN,WAGS,SAAAO,GAAQ,MAAK,CACtCT,WAAY,SAAAJ,GAAO,OAAIa,EChCC,SAAAb,GAAO,MAAK,CACpCN,KAAMnB,EAAME,YACZuB,WD8BgCI,CAAWJ,OAG9BW,CAA6Cb,kBEjC7CgB,EAJM,CACnBR,SAAU,YCWGA,EATE,WAA2C,IAA1CM,EAA0CG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCD,EAAaR,SAAUY,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1D,OAAQC,EAAOxB,MACb,KAAKnB,EAAME,YACT,OAAO0C,OAAAC,EAAA,EAAAD,CAAIP,GAAOS,OAAOH,EAAOlB,SAClC,QACE,OAAOY,ICDEU,EAJKC,YAAiB,CACnCjB,aCCIkB,EAAkB,CAACC,KAEnBC,EAAaC,YACjBC,IAAeC,WAAf,EAAmBL,IAUNM,EANAC,YACbT,EACER,EACAY,GCIWM,mLAVX,OACE5C,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUJ,MAAOA,GACf1C,EAAAC,EAAAC,cAAC6C,EAAD,eALQvC,IAAMC,WCGJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc325132.chunk.js","sourcesContent":["const types = {\r\n  COUNTER: 'COUNTER',\r\n  ADD_MESSAGE: 'ADD_MESSAGE'\r\n}\r\n\r\nexport default types\r\n","import openSocket from 'socket.io-client'\r\n\r\nconst socket = openSocket()\r\n\r\nexport default socket\r\n","import React from 'react'\r\nimport socket from '../sockets'\r\n\r\nclass Send extends React.Component {\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n    socket.emit('userAdd', this.input.value)\r\n    this.input.value = ''\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)}>\r\n        <input type='text' ref={e => this.input = e} />\r\n        <button>Add an item</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Send\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addMessage } from '../actions'\r\nimport socket from '../sockets'\r\nimport Send from './Send'\r\n\r\nclass Container extends React.Component {\r\n  componentDidMount () {\r\n    socket.on('addItem', payload => {\r\n      console.log(payload)\r\n      this.props.addMessage(payload)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Some Nonsence from the Server</h2>\r\n        <Send />\r\n        <ul>\r\n          {this.props.messages.map((each, idx) =>\r\n            <li key={idx}>{each}</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n   )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  messages: state.messages\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addMessage: payload => dispatch(addMessage(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Container)\r\n","import types from './types'\r\n\r\nexport const addMessage = payload => ({\r\n  type: types.ADD_MESSAGE,\r\n  payload\r\n})\r\n","const initialState = {\r\n  messages: []\r\n}\r\n\r\nexport default initialState\r\n","import initialState from '../constants/initialState'\r\nimport types from '../actions/types'\r\n\r\nconst messages = (state = initialState.messages, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_MESSAGE:\r\n      return [...state].concat(action.payload)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default messages\r\n","import { combineReducers } from 'redux'\r\nimport messages from './messages'\r\n\r\nconst rootReducer = combineReducers ({\r\n  messages\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport initialState from './initialState'\r\nimport rootReducer from '../reducers'\r\n\r\nconst middleWareInput = [thunk]\r\n\r\nconst middleware = compose (\r\n  applyMiddleware(...middleWareInput)\r\n  // , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nconst store  = createStore (\r\n  rootReducer\r\n  , initialState\r\n  , middleware\r\n)\r\n\r\nexport default store\r\n","import React from 'react';\nimport './App.css';\nimport Container from './components/Container'\n\nimport { Provider } from 'react-redux'\nimport store from './constants/store'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <Container />\n        </Provider>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}