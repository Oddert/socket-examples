{"version":3,"sources":["constants/initialState.js","actions/types.js","reducers/messages.js","reducers/users.js","reducers/index.js","constants/store.js","sockets/index.js","components/Display.js","actions/index.js","components/Input.js","components/UserList.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["initialState","messages","users","types","ADD_MESSAGE","UPDATE_USERS","state","arguments","length","undefined","action","type","Object","toConsumableArray","concat","payload","rootReducer","combineReducers","middlewareInput","thunk","middleware","compose","applyMiddleware","apply","store","createStore","socket","openSocket","Display","_this","this","on","props","addMessage","react_default","a","createElement","className","map","each","idx","status","self","key","message","user","React","Component","connect","dispatch","Input","onSubmit","e","preventDefault","emit","input","value","name","ref","UserList","updateUsers","Container","components_UserList","components_Display","components_Input","App","es","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","client_src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4dc4f29.chunk.js","sourcesContent":["\r\nconst initialState = {\r\n  messages: [],\r\n  users: []\r\n}\r\n\r\nexport default initialState\r\n","\r\nconst types = {\r\n  ADD_MESSAGE: 'ADD_MESSAGE',\r\n  UPDATE_USERS: 'UPDATE_USERS',\r\n}\r\n\r\nexport default types\r\n","import types from '../actions/types'\r\n\r\nconst messages = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.ADD_MESSAGE:\r\n      return [...state, action.payload]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default messages\r\n","import initialState from '../constants/initialState'\r\nimport types from '../actions/types'\r\n\r\nconst users = (state = initialState.users, action) => {\r\n  switch (action.type) {\r\n    case types.UPDATE_USERS:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default users\r\n","import { combineReducers } from 'redux'\r\n\r\nimport messages from './messages'\r\nimport users from './users'\r\n\r\nconst rootReducer = combineReducers ({\r\n  messages,\r\n  users\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport initialState from './initialState'\r\nimport rootReducer from '../reducers'\r\n\r\nconst middlewareInput = [thunk]\r\n\r\nconst middleware = compose (\r\n  applyMiddleware(...middlewareInput)\r\n  // , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nconst store = createStore (\r\n  rootReducer\r\n  , initialState\r\n  , middleware\r\n)\r\n\r\nexport default store\r\n","import openSocket from 'socket.io-client'\r\n\r\nconst socket = openSocket('http://localhost:5000/')\r\n\r\nexport default socket\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { addMessage } from '../actions'\r\nimport socket from '../sockets'\r\n\r\nimport './styles/Display.css'\r\n\r\nclass Display extends React.Component {\r\n  componentDidMount () {\r\n    socket.on('addMessage', payload => this.props.addMessage(payload))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='Display'>\r\n        {this.props.messages.map((each, idx) =>\r\n          <div\r\n            className={\r\n              each.status\r\n                ? 'message-container status'\r\n                : each.self\r\n                  ? 'message-container self'\r\n                  : 'message-container'\r\n              }\r\n            key={idx}\r\n            >\r\n            {each.status\r\n              ? <div className='message status'>{each.message}</div>\r\n              : <div className='message'>\r\n                  <strong>{each.self ? 'Me' : each.user}</strong>: {each.message}\r\n                </div>\r\n              }\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  messages: state.messages\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addMessage: payload => dispatch(addMessage(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Display)\r\n","import types from './types'\r\n\r\nexport const addMessage = payload => ({\r\n  type: types.ADD_MESSAGE,\r\n  payload\r\n})\r\n\r\nexport const updateUsers = payload => ({\r\n  type: types.UPDATE_USERS,\r\n  payload\r\n})\r\n","import React from 'react'\r\n\r\nimport socket from '../sockets'\r\n\r\nimport './styles/Input.css'\r\n\r\nclass Input extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='Input'>\r\n        <form onSubmit={e => {\r\n          e.preventDefault()\r\n          socket.emit('newMessage', this.input.value)\r\n          this.input.value = ''\r\n        }}>\r\n          <input type='text' name='message' ref={e => this.input = e} />\r\n          <button>Send</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { updateUsers } from '../actions'\r\n\r\nimport socket from '../sockets'\r\n\r\nclass UserList extends React.Component {\r\n  componentDidMount () {\r\n    socket.on('updateUsers', payload => this.props.updateUsers(payload))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='UserList'>\r\n        <h3>Users</h3>\r\n        {this.props.users.map(each => <div key={each}>{each}</div>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateUsers: payload => dispatch(updateUsers(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList)\r\n","import React from 'react'\r\n\r\nimport Display from './Display'\r\nimport Input from './Input'\r\nimport UserList from './UserList'\r\n\r\nimport './styles/Container.css'\r\n\r\nclass Container extends React.Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className='display-flex'>\r\n          <UserList />\r\n          <Display />\r\n          <Input />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux'\nimport store from './constants/store'\n\nimport Container from './components/Container'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <Container />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}